name: Main Branch CD

on:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: testdb
      ACCESS_TOKEN_SECRET: test_access_secret
      REFRESH_TOKEN_SECRET: test_refresh_secret
      NEXT_PUBLIC_API_URL: http://localhost:3000
      DOCKER_IMAGE: bubblu2264326/hackops-enviro:latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean install dependencies
        run: |
          rm -rf node_modules
          rm -f package-lock.json
          npm install

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL... $i"
            sleep 2
          done
          echo "PostgreSQL failed to start"
          exit 1

      - name: Run Tests
        run: npm test

      - name: Build Application
        run: npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}


  security_scan:
    runs-on: ubuntu-latest
    needs: deploy
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run npm audit
        run: npm audit || true

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'hackops-enviro'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/


  monitoring:
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Set up New Relic
        run: |
          npm install newrelic
          echo "license_key: ${{ secrets.NEW_RELIC_LICENSE_KEY }}" > newrelic.yml
          
      - name: Configure New Relic
        run: |
          echo "app_name: hackops-enviro" >> newrelic.yml
          echo "log_level: info" >> newrelic.yml
