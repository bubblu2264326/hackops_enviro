name: Docker Image Security Scan

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Database configuration
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: testdb
      
      # JWT configuration
      ACCESS_TOKEN_SECRET: test_access_secret
      REFRESH_TOKEN_SECRET: test_refresh_secret
      
      # API configuration
      NEXT_PUBLIC_API_URL: http://localhost:3000

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL... $i"
            sleep 2
          done
          echo "PostgreSQL failed to start"
          exit 1

      - name: Run Tests
        run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: hackops-enviro:test

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'hackops-enviro:test'
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.json'

      - name: Process Trivy results
        run: |
          if [ -s trivy-results.json ]; then
            echo "Processing Trivy scan results..."
            VULNERABILITIES=$(jq -r '.Results[].Vulnerabilities | length' trivy-results.json)
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "⚠️ Found $VULNERABILITIES vulnerabilities:"
              jq -r '.Results[].Vulnerabilities[] | "\(.Severity) - \(.Title) (Package: \(.PkgName) \(.InstalledVersion))"' trivy-results.json
              echo "Continuing workflow despite vulnerabilities..."
            else
              echo "✅ No Critical or High severity vulnerabilities found."
            fi
          else
            echo "❌ No scan results found."
          fi

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json 
